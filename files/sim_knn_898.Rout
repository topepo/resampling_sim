
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5          ✔ recipes      1.0.9     
✔ dials        1.2.0.9000     ✔ rsample      1.2.0.9001
✔ dplyr        1.1.4          ✔ tibble       3.2.1     
✔ ggplot2      3.4.4          ✔ tidyr        1.3.1     
✔ infer        1.0.6          ✔ tune         1.1.2.9019
✔ modeldata    1.3.0          ✔ workflows    1.1.3.9001
✔ parsnip      1.2.0.9000     ✔ workflowsets 1.0.1.9001
✔ purrr        1.0.2          ✔ yardstick    1.3.0     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ purrr::discard() masks scales::discard()
✖ dplyr::filter()  masks stats::filter()
✖ dplyr::lag()     masks stats::lag()
✖ recipes::step()  masks stats::step()
• Use tidymodels_prefer() to resolve common conflicts.
> library(doMC)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
> library(sessioninfo)
> library(glue)
> 
> # ------------------------------------------------------------------------------
> 
> tidymodels_prefer()
> registerDoMC(cores = parallel::detectCores(logical = TRUE))
> 
> # ------------------------------------------------------------------------------
> 
> set.seed(898)
> chr_seed <- format(1:1000)[898]
> chr_seed <- gsub(" ", "0", chr_seed)
> 
> f <- expr(-1 - 4 * A - 2 * B - 0.2 * A^2 + 1 * B^2)
> 
> set.seed(898 + 1)
> sim_tr  <- modeldata::sim_logistic(200, f)
> sim_new <- modeldata::sim_logistic(1000, f)
> sim_te  <- modeldata::sim_logistic(50, f)
> sim_big <- modeldata::sim_logistic(10^6, f)
> 
> # ------------------------------------------------------------------------------
> 
> cls_met <- metric_set(brier_class, roc_auc, accuracy)
> 
> # ------------------------------------------------------------------------------
> # Fit the model to the entire training set then predict the test and large data
> 
> knn_spline_rec <-
+   recipe(class ~ A + B, data = sim_tr) %>%
+   step_normalize(A, B)
> 
> knn_spec <-
+   nearest_neighbor(neighbors = 1, weight_func = "triangular") %>%
+   set_mode("classification")
> 
> knn_spline_wflow <- workflow(knn_spline_rec, knn_spec)
> 
> knn_spline_fit <- fit(knn_spline_wflow, data = sim_tr)
> 
> knn_spline_te_pred <- augment(knn_spline_fit, sim_te)
> knn_spline_big_pred <- augment(knn_spline_fit, sim_big)
> 
> # ------------------------------------------------------------------------------
> 
> test_res <-
+   knn_spline_te_pred %>%
+   cls_met(class, estimate = .pred_class, .pred_one) %>%
+   mutate(method = "Test Set", n = 1, std_err = NA_real_) %>%
+   mutate(seed = 898, model = "knn")
> 
> big_res <-
+   knn_spline_big_pred %>%
+   cls_met(class, estimate = .pred_class, .pred_one) %>%
+   mutate(method = "Large Sample", n = 1, std_err = NA_real_) %>%
+   mutate(seed = 898, model = "knn")
> 
> save(test_res, big_res, file = file.path(glue("holdout_knn_{chr_seed}.RData")))
> 
> # ------------------------------------------------------------------------------
> # V-Fold CV
> 
> rs_v_fold <- NULL
> 
> for (reps in 1:10) {
+   for (v_val in c(5, 10, 15, 20)) {
+ 
+     tmp_rs <- vfold_cv(sim_tr, repeats = reps, v = v_val, strata = class)
+     tmp_res <-
+       knn_spline_wflow %>%
+       fit_resamples(
+         resamples = tmp_rs,
+         metrics = cls_met
+       ) %>%
+       collect_metrics()%>%
+       mutate(repeats = reps, folds = v_val, estimator = "standard",
+              seed = 898, model = "knn")
+     rs_v_fold <- bind_rows(rs_v_fold, tmp_res)
+ 
+   }
+ }






Execution halted
